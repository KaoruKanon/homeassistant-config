shell_command:
  google_home_get_token: !secret google_home_get_token
#give www/google_home_tracker/ permission for hass linux account 

automation:
  - alias: get_google_home_token_at_ha_restart
    trigger:
      - platform: homeassistant
        event: start
    action:
      - service: shell_command.google_home_get_token

  - alias: get_google_home_token_every_hour
    trigger:
      - platform: time_pattern
        hours: '*'
    action:
      - service: shell_command.google_home_get_token

  - alias: update_timer
    trigger:
      - platform: time_pattern
        seconds: '*'
    condition:
      - condition: not
        conditions:
          - condition: state
            entity_id: sensor.next_timer_human
            state: 'Google Home indisponible'
          - condition: state
            entity_id: sensor.next_timer_human
            state: 'Pas de timer'
    action:
      - service: homeassistant.update_entity
        entity_id: sensor.next_timer_human

sensor:
  - platform: command_line
    command: !secret google_home_next_timer
    name: next_timer
    value_template: >
      {% if value_json is defined %}
        {% set timer = value_json.timer|sort(attribute='fire_time') %}
        {% if timer[0] is defined %}
          {{ timer[0].fire_time }}
        {% else %}
          None
        {% endif %}
      {% endif %}

  - platform: template
    scan_interval: 1
    sensors:
      next_timer_human:
        value_template: >
          {% if states('sensor.next_timer') == "None" or states('sensor.next_timer') == "" %}
            Pas de timer
          {% elif states('sensor.next_timer') == "unavailable" or states('sensor.next_timer') == "unknown" %}
            Google Home indisponible
          {% elif (( states('sensor.next_timer')|int/1000 - as_timestamp(now()) - 3600) | timestamp_custom('%H') | int ) >= 1 %}
            {{ ( states('sensor.next_timer')|int/1000 - as_timestamp(now()) - 3600) | timestamp_custom('%Hh %Mm %Ss') }}
          {% elif (( states('sensor.next_timer')|int/1000 - as_timestamp(now()) - 3600) | timestamp_custom('%M') | int ) >= 1 %}  {{ ( states('sensor.next_timer')|int/1000 - as_timestamp(now()) - 3600) | timestamp_custom('%Mm %Ss') }}
          {% else %}
            {{ ( states('sensor.next_timer')|int/1000 - as_timestamp(now()) - 3600) | timestamp_custom('%Ss') }}
          {% endif %}
        friendly_name: Next timer
        icon_template: 'mdi:server'
