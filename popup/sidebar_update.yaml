action: fire-dom-event
browser_mod:
  command: popup
  title: Mise à jour
  style:
    .: |
      :host .content {
        width: 60em;
        height: 100%;
        padding: 2.1em 1.9em 1.9em 2.7em;
      }
    hui-grid-card:
      $: |
        button-card:nth-child(2), button-card:nth-child(4) {
          margin: 0.5em 0 3em 0.4em;
        }
        #root {
          grid-gap: 0 !important;
        }

  card:
    type: grid
    columns: 1
    square: false
    cards:

      ### hass
      - type: custom:button-card
        entity: sensor.hass_version_installed
        triggers_update:
          - sensor.hass_version_latest_beta
          - sensor.hass_version_latest
          - sensor.hass_release_notes_rc
          - sensor.hass_release_notes
        state_display: |
          [[[
            if (entity) {
              // markdown parser
              variables.markedjs;
              let links = new RegExp('<a href="([^"]+)"', "g");
              // states
              let installed = entity.state;
              let latest = installed.includes('b') ?
                states["sensor.hass_version_latest_beta"].state :
                states["sensor.hass_version_latest"].state;
              let release_notes = installed.includes('b') ?
                marked(states["sensor.hass_release_notes_rc"].attributes.body) :
                marked(states["sensor.hass_release_notes"].attributes.body);
              // return
              let subtitle = installed == latest ?
                `Aucune mise à jour` :
                `${latest} disponible ${String.fromCodePoint("0x1f389")}`;
              let output = installed == latest ?
                `<ul></ul>` :
                release_notes.replace(links, '<a href="#" onclick="window.open(\'$1\')"');
              return `
                <ha-icon icon="mdi:home-assistant"></ha-icon> <span class="title">Home Assistant ${installed}</span><br>
                <p class="subtitle">${subtitle}</p>
                ${output}
              `;
            }
          ]]]
        template:
          - updater
          - marked.js

        # Button for update and backup
      - type: custom:hui-element
        card_type: horizontal-stack
        cards:

        - type: custom:button-card
          entity: sensor.hass_version_installed
          triggers_update:
            - sensor.hass_version_latest
            - sensor.hass_version_latest_beta
          name: Mettre à jour HASS
          icon: mdi:update
          styles:
            card:
              - width: max-content
              - margin-bottom: 1em
              - margin-top: 1em
              - margin-left: 0.3em
              - filter: >
                  [[[
                    return entity.state === (states['sensor.hass_version_latest'].state ||
                    states['sensor.hass_version_latest_beta'].state) ?
                      'opacity(30%)' :
                      'drop-shadow(3px 3px 5px #00000050)';
                  ]]]
          tap_action:
            services: |
              [[[
                hass.callService('browser_mod', 'toast', {
                  message: 'Mise à jour en cours...'
                });
                  hass.callService('shell_command', 'ha_update');

              ]]]
          template: icon_name

        - type: custom:button-card
          entity: script.trigerred_snapshot
          name: Backup HASS
          icon: mdi:content-save
          styles:
            card:
              - width: max-content
              - margin-bottom: 1em
              - margin-top: 1em
              - margin-left: 1em
              - filter: >
                  [[[ return entity.state === '0' ? 'opacity(30%)' : 'drop-shadow(3px 3px 5px #00000050)'; ]]]"]
          tap_action:
            services: |
              [[[ hass.callService('browser_mod', 'toast', {message: 'Snapshot de HASS en cours...'});
                    hass.callService('script', 'trigerred_snapshot');
              ]]]
          template: icon_name

      ### hacs
      - type: custom:button-card
        entity: sensor.hacs
        state_display: |
          [[[
            if (entity) {
              let output = '';
              var arr = entity.attributes.repositories;
              for (var i = 0; i < arr.length; i++) {
                output += `<li><b><a href="#" onclick="window.open('https://github.com/${arr[i].name}/releases');">
                  ${arr[i].display_name}</a></b> ${arr[i].installed_version} \u279e ${arr[i].available_version}</li>`
              }
              let count = arr.length;
              let subtitle = count == 0
                  ? `Aucune mise à jour`
                  : `${count} ${count == 1 ? "mise à jour disponible" : "mise à jour disponibles"}
                    ${String.fromCodePoint("0x1f389")}`;
              return `
                <ha-icon icon="hacs:hacs"></ha-icon> <span class="title">Community Store ${states['sensor.template_hacs_version'].state}</span><br>
                <p class="subtitle">${subtitle}</p>
                <ul>${output}</ul>
              `;
            }
          ]]]
        template: updater

      - type: custom:button-card
        entity: sensor.hacs
        name: Ouvrir HACS
        icon: mdi:open-in-new
        styles:
          card:
            - width: max-content
            - filter: >
                [[[
                  return entity.state === '0' ?
                    'opacity(30%)' :
                    'drop-shadow(3px 3px 5px #00000050)';
                ]]]
        tap_action:
          action: fire-dom-event
          browser_mod:
            command: popup
            title: Home Assistant Community Store
            style: >
              :host .content {
                width: 75em;
              }
            card:
              type: iframe
              url: /hacs
              aspect_ratio: 65%
              style: |
                ha-card {
                  border-radius: 0 0 1em 1em;
                }
        template: icon_name

      ### other
      # - type: custom:button-card
      #   entity: sensor.template_updates
      #   state_display: |
      #     [[[
      #       if (entity) {
      #         let output = "";
      #         let attr = Object.fromEntries(
      #           Object.entries(entity.attributes).filter(([, value]) => {
      #             return value != false;
      #           })
      #         );
      #         let count = Object.keys(attr).length;
      #         for (const [, value] of Object.entries(attr)) {
      #           output += `<li>${value}</li>`;
      #         }
      #         let subtitle = count == 0
      #             ? `Inga uppdateringar`
      #             : `${count} ${count == 1 ? "uppdatering tillgänglig" : "uppdateringar tillgängliga"}
      #               ${String.fromCodePoint("0x1f389")}`;
      #         return `
      #           <ha-icon icon="mdi:update"></ha-icon> <span class="title">Övrigt</span><br>
      #           <p class="subtitle">${subtitle}</p>
      #           <ul>${output}</ul>
      #         `;
      #       }
      #     ]]]
      #   template: updater
