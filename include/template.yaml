template:

  ####################################################
  #                                                  #
  #                     TEMPLATE                     #
  #                                                  #
  ####################################################

  sensor:
    - unique_id: sidebar
      state: template
      attributes:
        time: >
          {% set hours = now().strftime('%H') %}
          {% set minutes = now().strftime('%M') %}
          <span class="time">
            {{ hours }}<span class="time-colon">:</span>{{ minutes }}
          </span>
        date: |
          <font color='#6a7377'><b>
          {%- if strptime(states('sensor.date'), '%Y-%m-%d').day != null %}
          {%- set days = ['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'] %}
          {%- set months = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',
          'Julliet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'] %}
            {{- days[now().weekday()] }}<br>
            {{- strptime(states('sensor.date'), '%Y-%m-%d').day }} {{ months[now().month-1] }}
          {%- endif -%}
          </b></font>
        greet: |
          <b>
          {%- set time = now().hour %}
          {%- if time <= 1 -%} Bonne nuit {{'\U0001F611'}}
          {%- elif time <= 3 -%} Bonne nuit {{'\U0001F62A'}}
          {%- elif time <= 5 -%} Bonne nuit {{'\U0001F634'}}
          {%- elif time <= 7 -%} Bonjour {{'\U0001F4A9'}}
          {%- elif time <= 9 -%} Bonjour {{'\u2615\uFE0F'}}
          {%- elif time <= 10 -%} Bonjour {{'\U0001F642'}}
          {%- elif time <= 13 -%} Bonne journée {{'\U0001F60A'}}
          {%- elif time <= 15 -%} Bonne journée {{'\U0001F60E'}}
          {%- elif time <= 17 -%} Bonne journée {{'\U0001F44B\U0001F3FB'}}
          {%- elif time <= 19 -%} Bonne soirée {{'\U0001F44B\U0001F3FB'}}
          {%- elif time <= 22 -%} Bonne soirée {{'\U0001F60C'}}
          {%- elif time <= 23 -%} Bonne soirée {{'\U0001F974'}}
          {%- else %} Bonne soirée {{'\U0001F974'}}
          {%- endif -%}
          </b>
        active: |
          <b>
          {%- set lights = [
            states.light.salon_1,
            states.light.salon_2,
            states.light.plafond_1,
            states.light.plafond_2,
            states.light.yeelight_stripe,
            states.light.lampe_japonaise,
          ] %}

          {%- set switches = [
            states.switch.computer_papa,
            states.switch.computer_rig_kaoru,
          ] %}

          {%- set lights_on = lights | selectattr('state','eq','on') | list %}
          {%- set lights_name = lights | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {%- set switches_on = switches | selectattr('state','eq','on') | list %}
          {%- set switches_name = switches | selectattr('state','eq','on') | map(attribute='name') | join(', ') %}

          {%- if (lights_on | length == 0) and (switches_on | length > 1) -%}
            {{ switches_name | regex_replace(',([^,]*)$',' et\\1') }} allumés

          {%- elif (lights_on | length == 0) and (switches_on | length == 1) -%}
            {{ switches_name | regex_replace(',([^,]*)$',' et\\1') }} allumé

          {%- elif (lights_on | length == 1) and (switches_on | length > 1) -%}
            {{ lights_name }} et {{switches_name }} allumés

          {%- elif (lights_on | length == 1) and (switches_on | length > 1) -%}
            {{ lights_name }}, {{ switches_name | regex_replace(',([^,]*)$',' et\\1') }} allumés

          {%- elif (lights_on | length > 1) and (switches_on | length == 1) -%}
            {{ lights_on | length }} lampes et {{ switches_name }} sont allumés

          {%- elif (lights_on | length > 1) and (switches_on | length > 1) -%}
            {{ lights_on | length }} lampes, {{ switches_name | regex_replace(',([^,]*)$',' et\\1') }} allumés

          {%- elif (lights_on | length == 1) and (switches_on | length == 0) -%}
            {{ lights_name }} est allumée

          {%- elif (lights_on | length > 1) and (switches_on | length == 0) -%}
            {{ lights_on | length }} sont allumées

          {%- else %}
            <font color='#6a7377'>Tout est éteint</font>
          {%- endif -%}
          </b>
        # vacuum: |
        #   {% set entity_id = 'vacuum.valetudo_robot' %}
        #   {%- if is_state(entity_id, 'cleaning') -%}
        #     <b>Morty dammsuger</b>
        #   {%- elif is_state(entity_id, 'returning') -%}
        #     <b>Morty är färdig</b>
        #   {%- endif %}
        weather: |
          {% set temperature = state_attr('weather.villeneuve_d_ascq', 'temperature') %}
          {% set precip = states('sensor.villeneuve_d_ascq_rain_chance') | round %}
          {% set snow = states('sensor.villeneuve_d_ascq_snow_chance') | round %}
          {% set weather_state = states('weather.villeneuve_d_ascq')
            | replace('rainy', 'Pluvieux')
            | replace('partlycloudy', 'Partiellement nuageux')
            | replace('cloudy', 'Nuageux')
            | replace('clear-night', 'Nuit claire')
            | replace('fog', 'Brumeux')
            | replace('hail', 'Grêleux')
            | replace('lightning-rainy', 'Orageux')
            | replace('lightning', 'Orageux')
            | replace('pourring', 'Pluie intense')
            | replace('snowy-rainy', 'Neigeux')
            | replace('snowy', 'Neigeux')
            | replace('sunny', 'Ensoleillé')
            | replace('windy-variant', 'Variblement venteux')
            | replace('windy', 'Venteux')
            | replace('exceptional', 'Exceptionel') %}
          {% if not state_attr('weather.villeneuve_d_ascq', 'temperature') == 'unknow' %}
            {% if temperature | float <= 0.0 %}
              {{ weather_state }}, il fait {{ temperature }}° avec {{ snow }}% de risque de neige. {{'\u2744\uFE0F' if precip > 30 }}
              Il fait {{ states('sensor.average_temperature') | round}}°C dans la maison.
            {% elif temperature | float > 0.0 %}
              {{ weather_state }}, il fait {{ temperature }}° avec {{ precip }}% de risque de pluie. {{ '\u2614\uFE0F' if precip > 30 }}
              Il fait {{ states('sensor.average_temperature') | round}}°C dans la maison.
            {% endif %}
          {% else %}
            Pas d'information métérologique...
          {% endif %}
        # transport: |
        #   {% if states('sensor.ilevia_ligne_1') != 'You have exceeded your quota of 3000 api calls per day' or states('sensor.ilevia_ligne_2') != 'You have exceeded your quota of 3000 api calls per day' %}
        #     {%  set list_min_next_bus = (state_attr('sensor.template_ilevia_ligne_1','min_next_bus') + state_attr('sensor.template_ilevia_ligne_2','min_next_bus')) | sort %}
        #       {% if list_min_next_bus|length %}
        #         {%- for min in list_min_next_bus[0:3] %}
        #           {%- if loop.first %} Bus dans {% else %}, {% endif -%}
        #           {{ min + ' min' }}
        #         {%- endfor %}
        #       {% endif %}
        #   {% endif %}
        #   {% set entity_id = 'sensor.skanetrafiken' %}
        #   {% if states(entity_id) != 'unknown' %}
        #   {%- set date = strptime(state_attr(entity_id, 'date') + ' ' + state_attr(entity_id, 'time'), "%X") %}
        #   {%- set time = as_timestamp(date) | timestamp_custom('%H:%M') -%}
        #     Nästa buss går {{ time }} från {{ state_attr(entity_id, 'name').split()[1] }}
        #   {% endif %}
        # laundry: |
        #   {%- set start_time = state_attr('calendar.tvatta', 'start_time') %}
        #   {% if start_time != None %}
        #     {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
        #     {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int / 24 %}
        #     {%- set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
        #     {%- set day = strptime(start_time, '%Y-%m-%d %H:%M:%S').strftime('%A')
        #     | replace('Monday', 'Måndag')
        #     | replace('Tuesday', 'Tisdag')
        #     | replace('Wednesday', 'Onsdag')
        #     | replace('Thursday', 'Torsdag')
        #     | replace('Friday', 'Fredag')
        #     | replace('Saturday', 'Lördag')
        #     | replace('Sunday', 'Söndag') %}
        #     {%- if count <= 0.0 -%}
        #       {{'\U0001F4A6'}} Tvätt idag {{ time }}
        #     {%- elif count <= 1.0 -%}
        #       Tvätt imorgon klockan {{ time }}
        #     {%- elif count <= 2.0 -%}
        #       Tvätt i övermorgon klockan {{ time }}
        #     {%- else -%}
        #       Tvätt om {{ (count + hours) | round }} dagar på {{ day }} kl {{ time }}
        #     {%- endif %}
        #   {%- endif %}
        battery: |
         {% set entities = [
            'sensor.battery_chambre_papa',
            'sensor.battery_thermometre_cuisine',
            'sensor.battery_chambre_william',
            'sensor.battery_thermometre_salon',
            'sensor.battery_salle_de_bain',
            'sensor.battery_switch_1',
            'sensor.battery_switch_2',
            'sensor.battery_switch_3' ] %}
          {%- for sensor in entities if states(sensor) | int <= 5 and states(sensor) != 'unknown' %}
            {%- if loop.first %} {{-'\u26A0\uFE0F'}} Batterie {{-' \u26A0\uFE0F'}} {% else %}, {% endif -%}
            {{ state_attr(sensor, 'friendly_name') + ': ' +  states(sensor) + '%' }}
          {%- endfor %}
        # mathem: |
        #   {%- set start_time = state_attr('calendar.mathem', 'start_time') %}
        #   {%- set end_time = state_attr('calendar.mathem', 'end_time') %}
        #   {% if start_time != None %}
        #     {%- set time = as_timestamp(start_time) | timestamp_custom('%H:%M') %}
        #     {%- set time_end = as_timestamp(end_time) | timestamp_custom('%H:%M') %}
        #     {%- set hours = as_timestamp(start_time) | timestamp_custom('%H') | int / 24 %}
        #     {%- set count = (as_timestamp(start_time) - as_timestamp(now())) / 86400 - hours %}
        #     {%- set day = strptime(start_time, '%Y-%m-%d %H:%M:%S').strftime('%A')
        #     | replace('Monday', 'Måndag')
        #     | replace('Tuesday', 'Tisdag')
        #     | replace('Wednesday', 'Onsdag')
        #     | replace('Thursday', 'Torsdag')
        #     | replace('Friday', 'Fredag')
        #     | replace('Saturday', 'Lördag')
        #     | replace('Sunday', 'Söndag') %}
        #     {%- if count <= 0.0 -%}
        #       {{'\U0001F6D2'}} Mathem idag mellan {{ time }}-{{ time_end }}
        #     {%- elif count <= 1.0 -%}
        #       Mathem imorgon mellan {{ time }}-{{ time_end }}
        #     {%- elif count <= 2.0 -%}
        #       Mathem i övermorgon mellan {{ time }}-{{ time_end }}
        #     {%- else -%}
        #       Mathem om {{ (count + hours) | round }} dagar på {{ day }} mellan {{ time }}-{{ time_end }}
        #     {%- endif %}
        #   {%- endif %}
        plex: |
          {% if is_state('binary_sensor.plex_availability', 'off') -%}
            {{-'\u26A0\uFE0F'}} Plex indisponible...
          {%- endif %}
        internet: |
          {% if is_state('binary_sensor.rpi_internet_access', 'off') -%}
            {{-'\u26A0\uFE0F'}} Vérifier l'accès inteernet
          {%- endif %}

    # - unique_id: updates
    #   state: template
    #   attributes:
    #     esphome: >
    #       {% macro f(e) %}
    #         {{- device_attr(device_id('switch.' + e), 'sw_version') -}}
    #       {% endmacro %}
    #       {% set group = [f('gosund_1_switch'), f('gosund_2_switch'), f('gosund_3_switch')] | min %}
    #       {% set installed = group.split()[0] %}
    #       {% set latest = states('sensor.esphome_version_latest') %}
    #       {% set url = 'https://github.com/esphome/esphome/releases/latest' %}
    #       {% if installed != latest %}
    #         <b><a href="#" onclick="window.open('{{ url }}');">ESPHome</a></b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}
    #     valetudo: >
    #       {% set installed = device_attr(device_id('vacuum.valetudo_robot'), 'sw_version').split(' ')[0] %}
    #       {% set latest = states('sensor.valetudo_version_latest') %}
    #       {% set url = 'https://github.com/Hypfer/Valetudo/releases/latest' %}
    #       {% if installed != latest %}
    #         <b><a href="#" onclick="window.open('{{ url }}');">Valetudo</a></b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}
    #     playactor: >
    #       {% set installed = states('sensor.playactor_version_installed') %}
    #       {% set latest = states('sensor.playactor_version_latest') %}
    #       {% set url = 'https://github.com/dhleong/playactor/releases/latest' %}
    #       {% if installed != latest %}
    #         <b><a href="#" onclick="window.open('{{ url }}');">playactor</a></b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}
    #     kemperprofiler: >
    #       {% set installed = state_attr('sensor.kemper_version', 'profiler_installed') %}
    #       {% set latest = state_attr('sensor.kemper_version', 'profiler_latest') %}
    #       {% if installed != latest %}
    #         <b>Kemper Profiler OS</b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}
    #     rigmanager: >
    #       {% set installed = state_attr('sensor.kemper_version', 'rigmanager_installed') %}
    #       {% set latest = state_attr('sensor.kemper_version', 'rigmanager_latest') %}
    #       {% if installed != latest %}
    #         <b>Rig Manager</b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}
    #     unifi: >
    #       {% set url = 'https://192.168.1.1/settings/updates' %}
    #       {% if states('sensor.unifi_gateway_firmware_upgradable') | int > 0 %}
    #         <b><a href="#" onclick="window.open('{{ url }}');">UniFi Dream Machine</a></b> mise à jour disponible
    #       {% endif %}
    #     synology: >
    #       {% set installed = device_attr(device_id('sensor.nas_volume_1_status'), 'sw_version').split(' ')[1] %}
    #       {% set latest = states('sensor.synology_dsm_latest') %}
    #       {% if is_state('binary_sensor.nas_update_available', 'on') %}
    #         <b>Synology DSM</b> {{ installed + ' \u279e ' + latest }}
    #       {% endif %}

    # - unique_id: imac_cpu
    #   icon: mdi:chip
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ ((states('sensor.netdata_imac_cpu_system') | float
    #     + states('sensor.netdata_imac_cpu_user') | float)) | round(1) }}
    #
    # - unique_id: imac_mem
    #   icon: mdi:memory
    #   unit_of_measurement: '%'
    #   state: >
    #     {% set entity_id = states('sensor.netdata_imac_ram_free') | float %}
    #     {% set capacity = 32000 %}
    #     {{ (100 - (entity_id / capacity * 100)) | round(1) }}
    #
    # - unique_id: imac_system_ssd
    #   icon: custom:imac-ssd
    #   unit_of_measurement: '%'
    #   state: >
    #     {% set entity_id = states('sensor.netdata_imac_disk_system') | float %}
    #     {% set convert_gb = 1.07374182 %}
    #     {% set capacity = 255.85 %}
    #     {{ 100 - (entity_id * convert_gb / capacity * 100) | round }}
    #
    # - unique_id: imac_macintosh_hd
    #   icon: mdi:harddisk
    #   unit_of_measurement: '%'
    #   state: >
    #     {% set entity_id = states('sensor.netdata_imac_disk_macintosh_hd') | float %}
    #     {% set convert_gb = 1.07374182 %}
    #     {% set capacity = 999.86 %}
    #     {{ 100 - (entity_id * convert_gb / capacity * 100) | round }}
    #
    # - unique_id: imac_uptime
    #   icon: mdi:update
    #   device_class: timestamp
    #   state: >
    #     {% set seconds = states('sensor.netdata_imac_uptime') | int %}
    #     {{ (as_timestamp(now()) - seconds) | timestamp_custom('%Y-%m-%dT%H:%M:%S') }}

    - unique_id: dockermon_mem
      icon: mdi:memory
      state: >
        {% set entity_id = 'sensor.docker_cpu' %}
        {{ (state_attr(entity_id, 'memory_stats')['usage'] /
        state_attr(entity_id, 'memory_stats')['limit'] * 100) | round(1) | default(0) }}

    # - unique_id: imac_vpn
    #   state: >
    #     {{ 'Ej Ansluten' if is_state('switch.computer_imac', 'on') and
    #     states('sensor.imac_ip') == states('sensor.myip') else 'Ansluten' }}
    #   icon: >
    #     mdi:shield-{{ 'alert' if is_state('switch.computer_imac', 'on') and
    #     states('sensor.imac_ip') == states('sensor.myip') else 'check' }}

    # - unique_id: printer_status
    #   icon: mdi:printer-wireless
    #   state: >
    #     {% macro prt(state, translate) %}
    #     {{ translate if states('sensor.hp_deskjet_2600_series') == state }}
    #     {% endmacro %}
    #     {{ prt('On', 'På') }}
    #     {{ prt('Scanning', 'Skannar') }}
    #     {{ prt('Copying', 'Kopierar') }}
    #     {{ prt('Printing', 'Skriver ut') }}
    #     {{ prt('Cancelling Job', 'Avbryter') }}
    #     {{ prt('trayEmptyOrOpen', 'Inga papper') }}
    #     {{ prt('idle', 'Viloläge') }}
    #     {{ prt('Off', 'Av') }}
    #
    # - unique_id: roborock_filter
    #   icon: custom:roborock-filter
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ (states('sensor.main_filter') | float / 60 / 150 * 100) | round }}
    #
    # - unique_id: roborock_mainbrush
    #   icon: custom:roborock-mainbrush
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ (states('sensor.main_brush') | float / 60 / 300 * 100) | round }}
    #
    # - unique_id: roborock_sensors
    #   icon: custom:roborock-sensor
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ (states('sensor.sensor_cleaning') | float / 60 / 30 * 100) | round }}
    #
    # - unique_id: roborock_sidebrush
    #   icon: custom:roborock-sidebrush
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ (states('sensor.right_brush') | float / 60 / 200 * 100) | round }}

    - unique_id: fullykiosk_storage
      icon: mdi:sd
      unit_of_measurement: '%'
      state: >
        {% set FreeSpace = states('sensor.lenovotab_internal_storage_free_space') | float %}
        {% set TotalSpace = states('sensor.lenovotab_internal_storage_total_space') | float %}
        {% if not (FreeSpace == 0.0 or TotalSpace == 0.0) %}
          {{ 100 - (FreeSpace / TotalSpace * 100) | int }}
        {% endif %}

    - unique_id: fullykiosk_memory
      icon: mdi:memory
      unit_of_measurement: '%'
      state: >
        {% set FreeMemory = states('sensor.lenovotab_ram_free_memory') | float %}
        {% set TotalMemory = states('sensor.lenovotab_ram_total_memory') | float %}
        {% if not (FreeMemory == 0.0 or TotalMemory == 0.0) %}
          {{ 100 - (FreeMemory / TotalMemory * 100) | int }}
        {% endif %}

    - unique_id: fullykiosk_last_app_start
      icon: mdi:update
      device_class: timestamp
      state: >
        {{ states('sensor.lenovotab_start') | replace(' ','T') }}

    # - unique_id: nas_status
    #   icon: custom:synology-nas
    #   state: >
    #     {% set entity_id = 'sensor.nas_volume_1_status' %}
    #     {% if is_state(entity_id, 'normal') %}
    #       Bra
    #     {% elif is_state(entity_id, 'background') %}
    #       Verifierar
    #     {% else %}
    #       {{ states(entity_id) }}
    #     {% endif %}

    # - unique_id: hue_motion_battery_badrum
    #   device_class: battery
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ state_attr('binary_sensor.sensor_badrum_motion', 'battery_level') }}
    #
    # - unique_id: hue_motion_battery_hall
    #   device_class: battery
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ state_attr('binary_sensor.sensor_hall_motion', 'battery_level') }}
    #
    # - unique_id: hue_motion_battery_garderob
    #   device_class: battery
    #   unit_of_measurement: '%'
    #   state: >
    #     {{ state_attr('binary_sensor.sensor_garderob_motion', 'battery_level') }}

    - unique_id: hacs_version
      state: >
        {{ device_attr(device_id('sensor.hacs'), 'sw_version') }}

    - unique_id: lights_count
      state: template
      attributes:
        on_count: >
          {% set lights = [states.light.salon_1, states.light.salon_2, states.light.plafond_1, states.light.plafond_2,
          states.light.yeelight_stripe, states.light.lampe_japonaise] %}
          {% set lights_on = lights | selectattr('state','eq','on') | list %}
          {{ lights_on | length }}
        max_count: >
          {% set lights = [states.light.salon_1, states.light.salon_2, states.light.plafond_1, states.light.plafond_2,
          states.light.yeelight_stripe, states.light.lampe_japonaise] %}
          {{ lights | length }}

    - unique_id: ilevia_ligne_1
      state: template
      attributes:
        min_next_bus: >
          {% set force_update_template = states('sensor.time') %}
          {%if state_attr('sensor.ilevia_ligne_1','records')|length %}
            {% set list_min = namespace(numbers=[]) %}
              {% for records in state_attr('sensor.ilevia_ligne_1','records') -%}
              {% set bus_timestamp = (as_timestamp(records['fields']["heureestimeedepart"])) %}
                {%- if (bus_timestamp - as_timestamp(now()) ) | timestamp_custom("%M") != '00' %}
                  {% set list_min.numbers = list_min.numbers + [(bus_timestamp - as_timestamp(now()) ) | timestamp_custom("%M")] %}
                {%- endif %}
              {%- endfor -%}
              {{ list_min.numbers | sort }}
            {% else %}
              []
          {%- endif %}
        horaire_next_bus: >
          {% set force_update_template = states('sensor.time') %}
          {%if state_attr('sensor.ilevia_ligne_2','records')|length %}
            {% set list_min = namespace(numbers=[]) %}
            {% for records in state_attr('sensor.ilevia_ligne_2','records') -%}
              {% set bus_timestamp = (as_timestamp(records['fields']["heureestimeedepart"])) %}
              {%- if bus_timestamp > as_timestamp(now()) %}
                {% set list_min.numbers = list_min.numbers + [bus_timestamp | timestamp_custom("%H:%M")] %}
                {%- endif %}
              {%- endfor -%}
            {{ list_min.numbers | sort }}
          {% else %}
            []
          {%- endif %}
        bus_number_ligne: >
          {%if state_attr('sensor.ilevia_ligne_1','facet_groups') is not none %}
            {{state_attr('sensor.ilevia_ligne_1','facet_groups')[0]['facets'][0]['name'] }}
          {% else %}
            []
          {%- endif %}

    - unique_id: ilevia_ligne_2
      state: template
      attributes:
        min_next_bus: >
          {% set force_update_template = states('sensor.time') %}
          {%if state_attr('sensor.ilevia_ligne_2','records')|length %}
            {% set list_min = namespace(numbers=[]) %}
              {% for records in state_attr('sensor.ilevia_ligne_2','records') -%}
              {% set bus_timestamp = (as_timestamp(records['fields']["heureestimeedepart"])) %}
                {%- if (bus_timestamp - as_timestamp(now()) ) | timestamp_custom("%M") != '00' %}                  {# last modif #}
                  {% set list_min.numbers = list_min.numbers + [(bus_timestamp - as_timestamp(now()) ) | timestamp_custom("%M")] %}
                {%- endif %}
              {%- endfor -%}
              {{ list_min.numbers | sort }}
            {% else %}
              []
          {%- endif %}
        horaire_next_bus: >
          {% set force_update_template = states('sensor.time') %}
          {%if state_attr('sensor.ilevia_ligne_2','records')|length %}
            {% set list_min = namespace(numbers=[]) %}
            {% for records in state_attr('sensor.ilevia_ligne_2','records') -%}
              {% set bus_timestamp = (as_timestamp(records['fields']["heureestimeedepart"])) %}
              {%- if bus_timestamp > as_timestamp(now()) %}
                {% set list_min.numbers = list_min.numbers + [bus_timestamp | timestamp_custom("%H:%M")] %}
                {%- endif %}
              {%- endfor -%}
            {{ list_min.numbers | sort }}
          {% else %}
            []
          {%- endif %}
        bus_number_ligne: >
          {%if state_attr('sensor.ilevia_ligne_2','facet_groups') is not none %}
            {{state_attr('sensor.ilevia_ligne_2','facet_groups')[0]['facets'][0]['name'] }}
          {% else %}
            []
          {%- endif %}

    - unique_id: ilevia_ligne_3
      state: template
      attributes:
        min_next_bus: >
          {% set force_update_template = states('sensor.time') %}
          {%if state_attr('sensor.ilevia_ligne_3','records')|length %}
            {% set list_min = namespace(numbers=[]) %}
              {% for records in state_attr('sensor.ilevia_ligne_3','records') -%}
              {% set bus_timestamp = (as_timestamp(records['fields']["heureestimeedepart"])) %}
                {%- if (bus_timestamp - as_timestamp(now()) ) | timestamp_custom("%M") != '00' %}
                  {% set list_min.numbers = list_min.numbers + [(bus_timestamp - as_timestamp(now()) ) | timestamp_custom("%M")] %}
                {%- endif %}
              {%- endfor -%}
              {{ list_min.numbers | sort }}
            {% else %}
              []
          {%- endif %}
        horaire_next_bus: >
          {% set force_update_template = states('sensor.time') %}
          {%if state_attr('sensor.ilevia_ligne_3','records')|length %}
            {% set list_min = namespace(numbers=[]) %}
            {% for records in state_attr('sensor.ilevia_ligne_3','records') -%}
              {% set bus_timestamp = (as_timestamp(records['fields']["heureestimeedepart"])) %}
              {%- if bus_timestamp > as_timestamp(now()) %}
                {% set list_min.numbers = list_min.numbers + [bus_timestamp | timestamp_custom("%H:%M")] %}
                {%- endif %}
              {%- endfor -%}
            {{ list_min.numbers | sort }}
          {% else %}
            []
          {%- endif %}
        bus_number_ligne: >
          {%if state_attr('sensor.ilevia_ligne_3','facet_groups') is not none %}
            {{state_attr('sensor.ilevia_ligne_3','facet_groups')[0]['facets'][0]['name'] }}
          {% else %}
            []
          {%- endif %}

    - unique_id: ilevia_ligne_4
      state: template
      attributes:
        min_next_bus: >
          {% set force_update_template = states('sensor.time') %}
          {%if state_attr('sensor.ilevia_ligne_4','records')|length %}
            {% set list_min = namespace(numbers=[]) %}
              {% for records in state_attr('sensor.ilevia_ligne_4','records') -%}
              {% set bus_timestamp = (as_timestamp(records['fields']["heureestimeedepart"])) %}
                {%- if (bus_timestamp - as_timestamp(now()) ) | timestamp_custom("%M") != '00' %}
                  {% set list_min.numbers = list_min.numbers + [(bus_timestamp - as_timestamp(now()) ) | timestamp_custom("%M")] %}
                {%- endif %}
              {%- endfor -%}
              {{ list_min.numbers | sort }}
            {% else %}
              []
          {%- endif %}
        horaire_next_bus: >
          {% set force_update_template = states('sensor.time') %}
          {%if state_attr('sensor.ilevia_ligne_4','records')|length %}
            {% set list_min = namespace(numbers=[]) %}
            {% for records in state_attr('sensor.ilevia_ligne_4','records') -%}
              {% set bus_timestamp = (as_timestamp(records['fields']["heureestimeedepart"])) %}
              {%- if bus_timestamp > as_timestamp(now()) %}
                {% set list_min.numbers = list_min.numbers + [bus_timestamp | timestamp_custom("%H:%M")] %}
                {%- endif %}
              {%- endfor -%}
            {{ list_min.numbers | sort }}
          {% else %}
            []
          {%- endif %}
        bus_number_ligne: >
          {%if state_attr('sensor.ilevia_ligne_4','facet_groups') is not none %}
            {{state_attr('sensor.ilevia_ligne_4','facet_groups')[0]['facets'][0]['name'] }}
          {% else %}
            []
          {%- endif %}

    - unique_id: weather_temperature
      unit_of_measurement: '°C'
      state: >
        {{ state_attr('weather.villeneuve_d_ascq', 'temperature') }}

    - unique_id: weather_humidity
      unit_of_measurement: '°C'
      state: >
        {{ state_attr('weather.villeneuve_d_ascq', 'humidity') }}


#legacy
sensor:

  - platform: template
    sensors:
      hass_version:
        icon_template: mdi:home-assistant
        friendly_name_template: >
          Installé {{ states('sensor.hass_version_installed') }}
        value_template: >
          {{ 'Dernière' if states('sensor.hass_version_installed') ==
          states('sensor.hass_version_latest') else states('sensor.hass_version_latest') }}

      hass_dev_release:
        icon_template: mdi:dev-to
        device_class: timestamp
        friendly_name_template: >
          {% set release = state_attr('calendar.home_assistant_devs','message') %}
          {% if release == 'Home Assistant Core Beta Release' %}
            Prochaine beta
          {% elif release == 'Home Assistant Core Release' %}
            Prochaine release
          {% else %}
            {{ release }}
          {% endif %}
        value_template: >
          {{ state_attr('calendar.home_assistant_devs', 'start_time') | replace(' ','T') }}

      bbox_uptime_human:
        friendly_name: Uptime
        icon_template: mdi:update
        value_template: >
          {% if states.sensor.bbox_uptime.state is defined %}
            {% set time = states.sensor.bbox_uptime.state | int %}
            {% if time < 60 %}
               {{ time | timestamp_custom('%S s') }}
            {% elif time > 60 and time < 3600 %}
               {{ time | timestamp_custom('%M m %S s') }}
            {% elif time >= 3600 and time < 86400 %}
               {{ time | timestamp_custom('%H h %M m %S s') }}
            {% elif time >= 86400 %}
               {{ time // 86400 }} j{{ (time | timestamp_custom('%d j %H h %M m %S s'))[4:] }}
            {% endif %}
          {% endif %}

      hass_uptime:
        friendly_name: Dernier redémarrage
        icon_template: mdi:update
        value_template: >
          {% set uptime = states('sensor.uptime') | float %}
          {% if uptime < 1 %} Depuis {{ (uptime * 60) | int }} secondes
          {% elif uptime | int == 1 %} Depuis une minute
          {% elif uptime | int > 1 %}
            {% if uptime | int < 60 %} Depuis {{ uptime | int }} minutes
            {% elif uptime | int / 60 == 24 %} {{ (uptime | int / 60 / 24) | int }} Depuis un jour
            {% elif uptime | int / 60 >= 24 %} Depuis {{ (uptime | int / 60 / 24) | int }} jours
            {% elif uptime | int >= 60 and uptime | int < 120 %} {{ (uptime | int / 60) | int }} Depuis une heure
            {% elif uptime | int >= 120 %} Depuis {{ (uptime | int / 60) | int }}  heures
            {% endif %}
          {% endif %}

      rpi_net_down:
        value_template: ' '
        icon_template: mdi:arrow-down-bold
        friendly_name_template: >
          {% set down = states('sensor.network_throughput_in_eth0') | float * 10000 %}
          {% if down < 1000 %} {{ down | round(0) }} kb/s
          {% elif down >= 1000 %} {{ ((down / 1000) | round(2) | string).rstrip('.0') }} Mb/s
          {% endif %}

      rpi_net_up:
        value_template: ' '
        icon_template: mdi:arrow-up-bold
        friendly_name_template: >
          {% set up = states('sensor.network_throughput_out_eth0') | float * 10000 %}
          {% if up < 1000 %} {{ up | round(0) }} kb/s
          {% elif up >= 1000 %} {{ ((up / 1000) | round(2) | string).rstrip('.0') }} Mb/s
          {% endif %}

      fan_speed:
        value_template: >
          {% if is_state('fan.xiaomi_smart_fan_2', 'on')  %}
            {{ (state_attr('fan.xiaomi_smart_fan_2', 'percentage') / 25) | int }}
          {% endif %}
        friendly_name: Receiver Fan speed
        icon_template: mdi:mdi:fan-speed-up

    ####################################################
    #                                                  #
    #                    Monthly kWh                   #
    #                                                  #
    ####################################################


      enedis_kwh_1:
        friendly_name_template: "Jan"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[0].split(' ')[2] | int }}"

      enedis_kwh_2:
        friendly_name_template: "Fev"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[1].split(' ')[2] | int }}"

      enedis_kwh_3:
        friendly_name_template: "Mar"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[2].split(' ')[2] | int }}"

      enedis_kwh_4:
        friendly_name_template: "Avr"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[3].split(' ')[2] | int }}"

      enedis_kwh_5:
        friendly_name_template: "Mai"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[4].split(' ')[2] | int }}"

      enedis_kwh_6:
        friendly_name_template: "Jui"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[5].split(' ')[2] | int }}"

      enedis_kwh_7:
        friendly_name_template: "Jul"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[6].split(' ')[2] | int }}"

      enedis_kwh_8:
        friendly_name_template: "Aou"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[7].split(' ')[2] | int }}"

      enedis_kwh_9:
        friendly_name_template: "Sep"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[8].split(' ')[2] | int }}"

      enedis_kwh_10:
        friendly_name_template: "Oct"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[9].split(' ')[2] | int }}"

      enedis_kwh_11:
        friendly_name_template: "Nov"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[10].split(' ')[2] | int }}"

      enedis_kwh_12:
        friendly_name_template: "Dec"
        value_template: "{{ states('sensor.enedis_kwh').split(',')[11].split(' ')[2] | int }}"

      enedis_kwh_last_month_kwh:
        value_template: >
          {% set entity_id = 'sensor.enedis_kwh' %}
          {% for month in range(12) %}
            {% if now().month-1 == (states(entity_id).split(',')
            [month].split(' ')[0]|join|string).lstrip('0')|int %}
              {{ states(entity_id).split(',')[month].split(' ')[2] }}
            {% endif %}
          {% endfor %}
        unit_of_measurement: 'kWh'

      enedis_kwh_last_month_last_year_kwh:
        icon_template: mdi:lightning-bolt
        friendly_name_template: >
          {% set month = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet',
            'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre' ] %}
          {% if now().month-1 == 0 %}
            {{month[0]}} {{ now().year-1 }}
          {% else %}
            {{month[now().month-2] }} {{ now().year-1 }}
          {% endif %}
        value_template: >
          {{ state_attr('sensor.myenedis_01134587449350', 'last_month_last_year') | round }}
        unit_of_measurement: 'kWh'


      enedis_kwh_last_month_price:
        icon_template: mdi:calculator
        friendly_name_template: >
          {% set month = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet',
            'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre' ] %}
          {% if now().month-1 == 0 %}
            Estimé en {{month[0]}}
          {% else %}
            Estimé en {{month[now().month-2] }}
          {% endif %}
        value_template: "{{ (states('sensor.enedis_kwh_last_month_kwh') | float * 0.1558 + 11.47) | round(2) }}"
        unit_of_measurement: '€'

      enedis_kwh_diff_last_month_and_last_year:
        icon_template: mdi:chart-areaspline-variant
        friendly_name: >
          {% set month = ['Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin', 'Juillet',
            'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre' ] %}
          {% if now().month-1 == 0 %}
            {{month[0]}} {{ now().year-1 }}-{{ now().year }}
          {% else %}
            {{month[now().month-2] }} {{ now().year-1 }}-{{ now().year }}
          {% endif %}
        value_template: >
          {{ states('sensor.enedis_kwh_last_month_kwh') | int - states('sensor.enedis_kwh_last_month_last_year_kwh') | int }}
        unit_of_measurement: 'kWh'

      enedis_kwh_total_year_kwh:
        icon_template: mdi:poll-box
        friendly_name_template: >
          Total {{ now().year }}
        value_template: "{{ states('sensor.enedis_kwh').split('total=')[1]}}"
        unit_of_measurement: 'kWh'

      enedis_kwh_year:
        icon_template: mdi:checkbox-blank
        friendly_name_template: "{{ now().year }}"
        value_template: ' '

      enedis_kwh_last_year:
        icon_template: mdi:checkbox-blank
        friendly_name_template: "{{ now().year-1 }}"
        value_template: ' '
